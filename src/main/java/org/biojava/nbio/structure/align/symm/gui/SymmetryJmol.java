package org.biojava.nbio.structure.align.symm.gui;

import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuBar;
import javax.swing.JTextField;

import org.biojava.nbio.structure.Atom;
import org.biojava.nbio.structure.StructureException;
import org.biojava.nbio.structure.align.gui.MenuCreator;
import org.biojava.nbio.structure.align.gui.jmol.JmolPanel;
import org.biojava.nbio.structure.align.gui.jmol.MyJmolStatusListener;
import org.biojava.nbio.structure.align.gui.jmol.RasmolCommandListener;
import org.biojava.nbio.structure.align.gui.jmol.StructureAlignmentJmol;
import org.biojava.nbio.structure.align.model.AFPChain;
import org.biojava.nbio.structure.align.model.AfpChainWriter;
import org.biojava.nbio.structure.align.util.RotationAxis;
import org.biojava.nbio.structure.align.webstart.AligUIManager;

/** A class that provides a simple GUI for symmetry alignments in Jmol.
 *  Adapted from the StructureAlignmentJmol class of biojava.
 * 
 * @author lafita
 * 
 */
public class SymmetryJmol extends StructureAlignmentJmol{
	   
	public SymmetryJmol() throws StructureException{
		this(null,null,null);
	}
	
	/**
	 * The constructor is the main thing changed, because we add and change the actions of menus.
	 */
	public SymmetryJmol(AFPChain afpChain, Atom[] ca1, Atom[] ca2) throws StructureException {
		
		  //Hide the frame generated by the default StructureAlignmentJmol constructor
		  frame.dispose();
		  nrOpenWindows--;
		  
	      AligUIManager.setLookAndFeel();

	      nrOpenWindows++;
	      jmolPanel = new JmolPanel();

	      frame = new JFrame();

	      JMenuBar menu = SymmetryMenu.initMenu(frame,this, afpChain);

	      frame.setJMenuBar(menu);
	      //frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	      this.afpChain = afpChain;
	      this.ca1 = ca1;
	      this.ca2 = ca2;

	      frame.addWindowListener( new WindowAdapter()
	      {

	         @Override
			public void windowClosing(WindowEvent e) {

	            nrOpenWindows--;
	            
	            destroy();
	            
	            if ( nrOpenWindows > 0) {

	               frame.dispose();
	            }
	            else  {
	               // check if AlignmentGUI is visible..

	               SymmetryGui gui = SymmetryGui.getInstanceNoVisibilityChange();
	               if ( gui.isVisible()) {
	                  frame.dispose();
	                  gui.requestFocus();
	               } else {
	                  System.exit(0);
	               }
	            }
	         }
	      });

	      Container contentPane = frame.getContentPane();

	      Box vBox = Box.createVerticalBox();

	      jmolPanel.addMouseMotionListener(this);
	      jmolPanel.addMouseListener(this);

	      jmolPanel.setPreferredSize(new Dimension(DEFAULT_WIDTH,DEFAULT_HEIGHT));
	      vBox.add(jmolPanel);

      // USER SCRIPTING COMMAND
	      JTextField field = new JTextField();

	      field.setMaximumSize(new Dimension(Short.MAX_VALUE,30));   
	      field.setText(COMMAND_LINE_HELP);
	      RasmolCommandListener listener = new RasmolCommandListener(jmolPanel,field) ;

	      field.addActionListener(listener);
	      field.addMouseListener(listener);
	      field.addKeyListener(listener);
	      vBox.add(field);
	      
	      
      /// COMBO BOXES 
			Box hBox1 = Box.createHorizontalBox();
			hBox1.add(Box.createGlue());

			String[] styles = new String[] { "Cartoon", "Backbone", "CPK", "Ball and Stick", "Ligands","Ligands and Pocket"};
			JComboBox style = new JComboBox(styles);
			
			hBox1.setMaximumSize(new Dimension(Short.MAX_VALUE,30));
	
			hBox1.add(new JLabel("Style"));
			hBox1.add(style);
			vBox.add(hBox1);
			contentPane.add(vBox);
	
			style.addActionListener(jmolPanel);
	
			String[] colorModes = new String[] { "Secondary Structure", "By Chain", "Rainbow", "By Element", "By Amino Acid", "Hydrophobicity" ,"Suggest Domains" , "Show SCOP Domains"};
			JComboBox colors = new JComboBox(colorModes);
			colors.addActionListener(jmolPanel);
			hBox1.add(Box.createGlue());
			hBox1.add(new JLabel("Color"));
			hBox1.add(colors);
			

		// CHeck boxes
			Box hBox2 = Box.createHorizontalBox();
			hBox2.setMaximumSize(new Dimension(Short.MAX_VALUE,30));
			
			JButton resetDisplay = new JButton("Reset Display");
			
			resetDisplay.addActionListener(new ActionListener() {
				
				@Override
				public void actionPerformed(ActionEvent e) {
					System.out.println("reset!!");
					jmolPanel.executeCmd("restore STATE state_1");
					
				}
			});
			
			hBox2.add(resetDisplay); 
			hBox2.add(Box.createGlue());
			
			
			JCheckBox toggleSelection = new JCheckBox("Show Selection");
			toggleSelection.addItemListener(
			    new ItemListener() {
					
					@Override
					public void itemStateChanged(ItemEvent e) {
					  boolean showSelection = (e.getStateChange() == ItemEvent.SELECTED);
					  
					  if (showSelection){
						  jmolPanel.executeCmd("set display selected");
					  } else {
						  jmolPanel.executeCmd("set display off");
					  }
					}
				}
			);

			hBox2.add(toggleSelection);
			
			hBox2.add(Box.createGlue());
			vBox.add(hBox2);	
			
	      
		// STATUS DISPLAY

	      Box hBox = Box.createHorizontalBox();

	      status = new JTextField();		
	      status.setBackground(Color.white);
	      status.setEditable(false);
	      status.setMaximumSize(new Dimension(Short.MAX_VALUE,30));
	      status.setPreferredSize(new Dimension(DEFAULT_WIDTH / 2,30));
	      status.setMinimumSize(new Dimension(DEFAULT_WIDTH / 2,30));
	      hBox.add(status);      
	      text = new JTextField();
	      text.setBackground(Color.white);
	      text.setMaximumSize(new Dimension(Short.MAX_VALUE,30));
	      text.setPreferredSize(new Dimension(DEFAULT_WIDTH / 2,30));
	      text.setMinimumSize(new Dimension(DEFAULT_WIDTH / 2,30));
	      text.setText("Display of Atom info");
	      text.setEditable(false);
	      hBox.add(text);

	      vBox.add(hBox);



	      contentPane.add(vBox);
	      MyJmolStatusListener li = (MyJmolStatusListener) jmolPanel.getStatusListener();
	      li.setTextField(status);
	      frame.pack();
	      frame.setVisible(true); 


	      // init coordinates
	      initCoords();
	      resetDisplay();
	      
		  //String with the options to format the Symmetry Starting view
		  String cmd = "model 1; hide ligand; ";
		  RotationAxis axis = new RotationAxis(afpChain);
		  cmd += axis.getJmolScript(ca1);
		  jmolPanel.evalString(cmd);
		
	}
	
	/**
	 * Override the action listeners of the menu items to add the new options
	 */
		@Override
   	public void actionPerformed(ActionEvent e) {
		String cmd = e.getActionCommand();
		if ( cmd.equals(MenuCreator.TEXT_ONLY)) {
		    if ( afpChain == null) {
		       System.err.println("Currently not viewing an alignment!");
		       return;
		    }
	        //Clone the AFPChain to not override the FatCat numbers in alnsymb
	        AFPChain textAFP = (AFPChain) afpChain.clone();
		    String result = AfpChainWriter.toWebSiteDisplay(textAFP, ca1, ca2);
		    DisplaySymmAFP.showAlignmentImage(afpChain, result);
		    
		} else if ( cmd.equals(MenuCreator.PAIRS_ONLY)) {
		    if ( afpChain == null) {
		       System.err.println("Currently not viewing an alignment!");
		       return;
		    }
		    String result = AfpChainWriter.toAlignedPairs(afpChain, ca1, ca2) ;
		
		    DisplaySymmAFP.showAlignmentImage(afpChain, result);
		    
		} else if (cmd.equals(MenuCreator.ALIGNMENT_PANEL)){
		    if ( afpChain == null) {
		       System.err.println("Currently not viewing an alignment!");
		       return;
		    }
		    DisplaySymmAFP.showAlignmentImage(afpChain, ca1, ca2, this);
		
		} else if (cmd.equals(MenuCreator.FATCAT_TEXT)){
		    if ( afpChain == null) {
		       System.err.println("Currently not viewing an alignment!");
		       return;
		    }
		    String result = afpChain.toFatcat(ca1, ca2) ;
		    result += AFPChain.newline;
		    result += afpChain.toRotMat();
		    DisplaySymmAFP.showAlignmentImage(afpChain, result);
		    
		} else if (cmd.equals(SymmetryMenu.SUBUNIT_DISPLAY)){
	    	 if ( afpChain == null) {
	              System.err.println("Currently not viewing an alignment!");
	              return;
	    	 }
	         DisplaySymmAFP.displaySuperimposedSubunits(afpChain, ca1, ca2);
	      
	    } else if (cmd.equals(SymmetryMenu.SUBUNIT_ALIGN)){
	    	 if ( afpChain == null) {
	              System.err.println("Currently not viewing an alignment!");
	              return;
	          }
	    	  DisplaySymmAFP.showMulAlnImage(afpChain, ca1, ca2);
		
		} else if (cmd.equals(SymmetryMenu.SYMMETRY)){
			
	    	  SymmetryMenu.showSymmDialog();
	    }
      }
}
